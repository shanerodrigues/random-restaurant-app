{"version":3,"sources":["components/Res.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","Res","useState","lat","setLat","lng","setLng","currentRestaurant","setCurrentRestaurant","currentRandomRestaurant","className","Typography","name","vicinity","ThemeProvider","variant","align","color","gutterBottom","Box","display","Input","placeholder","onChange","event","target","value","Button","onClick","location","window","google","maps","LatLng","map","Map","document","getElementById","center","zoom","request","radius","type","places","PlacesService","nearbySearch","results","randomRestaurant","_","random","responsiveFontSizes","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAUIA,EAAQC,cAKG,SAASC,IAAM,IAAD,EAEHC,oBAAU,WAFP,mBAElBC,EAFkB,KAEbC,EAFa,OAGHF,mBAAS,UAHN,mBAGlBG,EAHkB,KAGbC,EAHa,OAIyBJ,mBAAS,MAJlC,mBAIlBK,EAJkB,KAICC,EAJD,KAyCzB,IAAIC,EAA0B,KAa9B,OAZIF,IACAE,EACI,yBAAKC,UAAU,qBACX,kBAACC,EAAA,EAAD,2CACA,6BAAMJ,EAAkBK,MACxB,6BAAML,EAAkBM,YAQhC,yBAAKH,UAAU,mBACX,kBAACI,EAAA,EAAD,CAAef,MAAOA,GACtB,kBAACY,EAAA,EAAD,CAAYI,QAAQ,KAAKC,MAAM,SAASC,MAAM,cAAcC,cAAY,GACpE,kBAACC,EAAA,EAAD,qCAEJ,yBAAKT,UAAU,aACf,kBAACC,EAAA,EAAD,CAAYI,QAAQ,KAAKC,MAAM,SAASC,MAAM,gBAAgBG,QAAQ,UAClE,kBAACD,EAAA,EAAD,sEAIJ,yBAAKT,UAAW,WACZ,kBAACW,EAAA,EAAD,CAAOC,YAAc,6CAA6CC,SA5D9E,SAAyBC,GACrBpB,EAAOoB,EAAMC,OAAOC,UA4DZ,kBAACL,EAAA,EAAD,CAAOC,YAAc,4CAA4CC,SAvD7E,SAAyBC,GACrBlB,EAAOkB,EAAMC,OAAOC,WAwDhB,kBAACC,EAAA,EAAD,CAAQC,QAnDhB,SAAsBJ,GAClB,IAAMK,EAAW,IAAIC,OAAOC,OAAOC,KAAKC,OAAO9B,EAAIE,GAE7C6B,EAAM,IAAIJ,OAAOC,OAAOC,KAAKG,IAAIC,SAASC,eAAe,OAAQ,CACnEC,OAAOT,EACPU,KAAM,KAGJC,EAAU,CACZX,SAAUA,EACVY,OAAQ,OACRC,KAAM,CAAC,eAGK,IAAIZ,OAAOC,OAAOC,KAAKW,OAAOC,cAAcV,GAEpDW,aAAaL,GAAS,SAACM,GAC3B,IAAMC,EAAmBD,EAAQE,IAAEC,OAAO,EAAE,KAC5CzC,EAAqBuC,OAiCU9B,MAAO,YAAYF,QAAQ,YAA1D,UACCN,GA3EbV,EAAQmD,YAAoBnD,GCKboD,MAVf,WACE,OACE,yBAAKzC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACT,EAAD,SCEYmD,QACW,cAA7BtB,OAAOD,SAASwB,UAEe,UAA7BvB,OAAOD,SAASwB,UAEhBvB,OAAOD,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD6H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a4b0f101.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport _ from 'lodash'; \r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\r\n//process.env.REACT_APP_RES_API_KEY\r\n\r\n// Responsive Title\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\n\r\n\r\n\r\nexport default function Res(){\r\n\r\n    const [lat, setLat] = useState(-33.865143);\r\n    const [lng, setLng] = useState(151.209900);\r\n    const [currentRestaurant, setCurrentRestaurant] = useState(null);\r\n\r\n\r\n    function handleLatChange(event){\r\n        setLat(event.target.value);\r\n        \r\n\r\n    }\r\n\r\n    function handleLngChange(event){\r\n        setLng(event.target.value);\r\n        \r\n    }\r\n\r\n\r\n    function handleSearch(event){\r\n        const location = new window.google.maps.LatLng(lat,lng);\r\n\r\n        const map = new window.google.maps.Map(document.getElementById('map'), {\r\n            center:location,\r\n            zoom: 15\r\n        });\r\n\r\n        const request = {\r\n            location: location,\r\n            radius: '1200',\r\n            type: ['restaurant']\r\n        };\r\n\r\n        const service = new window.google.maps.places.PlacesService(map);\r\n\r\n        service.nearbySearch(request, (results) =>{\r\n            const randomRestaurant = results[_.random(0,19)];\r\n            setCurrentRestaurant(randomRestaurant); \r\n            });\r\n    }\r\n    \r\n    let currentRandomRestaurant = null;\r\n    if (currentRestaurant) {\r\n        currentRandomRestaurant = (\r\n            <div className=\"random-restaurant\">\r\n                <Typography>The current random restaurant is: </Typography>\r\n                <div>{currentRestaurant.name}</div>\r\n                <div>{currentRestaurant.vicinity}</div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"outer-container\">\r\n            <ThemeProvider theme={theme}>\r\n            <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom >\r\n                <Box>Random Restaurant Generator</Box>\r\n            </Typography>\r\n            <div className=\"subtitle2\">\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" display=\"inline\">\r\n                <Box >Enter the coordinates of a city and discover a restaurant!</Box>\r\n            </Typography>\r\n            </div>\r\n            </ThemeProvider>\r\n            <div className =\"lat-lng\">\r\n                <Input placeholder = \"search for lat here. default is -33.865143\" onChange={handleLatChange}/>\r\n                <Input placeholder = \"search for lng here default is 151.209900\" onChange={handleLngChange}/>\r\n            </div>\r\n            <Button onClick={handleSearch} color =\"secondary\" variant=\"outlined\">Search</Button>\r\n            {currentRandomRestaurant}\r\n        </div>\r\n            \r\n    \r\n    );\r\n}","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport Res from './components/Res';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Res />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}