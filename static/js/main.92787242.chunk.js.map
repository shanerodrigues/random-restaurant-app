{"version":3,"sources":["components/Res.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","responsiveFontSizes","Res","useState","lat","setLat","lng","setLng","currentRestaurant","setCurrentRestaurant","place","handleSearch","event","location","window","google","maps","LatLng","map","Map","document","getElementById","center","zoom","request","radius","type","places","PlacesService","nearbySearch","results","randomRestaurant","_","random","currentRandomRestaurant","className","Typography","name","vicinity","ThemeProvider","variant","align","color","gutterBottom","Box","display","Input","placeholder","onChange","target","value","Button","onClick","a","async","request_url","api_url","fetch","response","json","data","textLat","geometry","textLng","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92787242.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport _ from 'lodash'; \r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\r\n\r\n//process.env.REACT_APP_RES_API_KEY\r\n\r\n// Responsive Title\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\n\r\nvar api_key = 'bd548102b4ae420185f6f1dd430dc27b'\r\nvar api_url = 'https://api.opencagedata.com/geocode/v1/json?'\r\n//q=PLACENAME&key=bd548102b4ae420185f6f1dd430dc27b'\r\n\r\n// https://api.opencagedata.com/geocode/v1/json?q=LAT+LNG&key=bd548102b4ae420185f6f1dd430dc27b\r\n// https://api.opencagedata.com/geocode/v1/json?q=PLACENAME&key=bd548102b4ae420185f6f1dd430dc27b\r\n\r\n// commented\r\n\r\n/*\r\n            \r\n        <div className=\"flex.container\">\r\n            <ThemeProvider theme={theme}>\r\n            <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom >\r\n                <Box>Random Restaurant Generator</Box>\r\n            </Typography>\r\n            <div className=\"subtitle2\">\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" display=\"inline\">\r\n                <Box >Enter the coordinates of a city and discover a restaurant!</Box>\r\n            </Typography>\r\n            <div className=\"menu\">\r\n                <div className =\"lat-lng\">\r\n                    <Input placeholder = \"search for lat here. default is -33.865143\" onChange={handleLatChange}/>\r\n                    <Input placeholder = \"search for lng here default is 151.209900\" onChange={handleLngChange}/>\r\n                    <Button onClick={handleSearch} color =\"secondary\" variant=\"outlined\">Search</Button>\r\n                </div>\r\n                <div className=\"other\">\r\n                    <div className='other-input'>\r\n                        <Input placeholder = \"search for city here default is Sydney\" onChange={handleSearchChange}></Input>\r\n                        \r\n                    </div>\r\n                    <Button onClick={handleRequest} color=\"secondary\" variant=\"outlined\">Search demo</Button>\r\n                </div>\r\n                {currentRandomRestaurant}\r\n            </div>\r\n        </div>\r\n\r\n        // mess up\r\n        <div class=\"wrapper\">\r\n            <header class=\"header\">\r\n                Welcome\r\n            </header>\r\n            <div class=\"aside aside-1\">\r\n                <Input placeholder = \"search for lat here. default is -33.865143\" onChange={handleLatChange}/>\r\n                <Input placeholder = \"search for lng here default is 151.209900\" onChange={handleLngChange}/>\r\n                <Button onClick={handleSearch} color =\"secondary\" variant=\"outlined\">Search</Button>\r\n            </div>\r\n            <div class=\"aside aside-2\">\r\n                <Input placeholder = \"search for city here default is Sydney\" onChange={handleSearchChange}></Input>\r\n                <Button onClick={handleRequest} color=\"secondary\" variant=\"outlined\">Search demo</Button>\r\n            </div>\r\n            <footer class=\"footer\">\r\n                {currentRandomRestaurant}\r\n            </footer>\r\n        </div>\r\n        // Text search\r\n                        <div className=\"other\">\r\n                    <div className='other-input'>\r\n                        <Input placeholder = \"search for city here default is Sydney\" onChange={handleSearchChange}></Input>\r\n                        \r\n                    </div>\r\n                    <Button onClick={handleRequest} color=\"secondary\" variant=\"outlined\">Search demo</Button>\r\n                </div>\r\n*/\r\n\r\n\r\n\r\nexport default function Res(){\r\n\r\n\r\n    var [lat, setLat] = useState(-33.865143);\r\n    var [lng, setLng] = useState(151.209900);\r\n    const [currentRestaurant, setCurrentRestaurant] = useState(null);\r\n    var [place, setPlace] = useState('Sydney');\r\n    var textLat = null;\r\n    var textLng = null;    \r\n\r\n    /* Function that returns lat + long of place given in Text Search \r\n    The lat + long is then passed into handleSearch() function which\r\n    finds the restaurant and displays.*/\r\n    async function handleRequest(event){\r\n        \r\n        \r\n\r\n        var request_url = api_url \r\n        + 'q=' + place\r\n        + '&key=' + api_key\r\n        // debugging console.log(place);\r\n\r\n\r\n        const response = await fetch(request_url);\r\n        const data = await response.json();\r\n        //setXLat(data.results[0].geometry.lat);\r\n        var textLat = (data.results[0].geometry.lat);\r\n        var textLng = (data.results[0].geometry.lng);\r\n        //debugging console.log(textLat + ' lat ' + textLng + ' lng ');\r\n        lat = (textLat);\r\n        lng = (textLng);\r\n        // debugging console.log(lat + ' lat ' + lng + ' lng ');\r\n        handleSearch();\r\n        \r\n    }\r\n\r\n    /*Gets values from inputs and stores them in variables */\r\n    function handleSearchChange(event){\r\n        place = (event.target.value);\r\n        //console.log(place);\r\n\r\n    }\r\n    function handleLatChange(event){\r\n        setLat(event.target.value);\r\n\r\n    }\r\n\r\n    function handleLngChange(event){\r\n        setLng(event.target.value);\r\n    }\r\n\r\n    // Google Maps Javascript API \r\n    function handleSearch(event){\r\n        const location = new window.google.maps.LatLng(lat,lng);\r\n\r\n        const map = new window.google.maps.Map(document.getElementById('map'), {\r\n            center:location,\r\n            zoom: 15\r\n        });\r\n\r\n        const request = {\r\n            location: location,\r\n            // Radius is in metres.\r\n            radius: '1500',\r\n            type: ['restaurant']\r\n        };\r\n\r\n        const service = new window.google.maps.places.PlacesService(map);\r\n\r\n        service.nearbySearch(request, (results) =>{\r\n            const randomRestaurant = results[_.random(0,19)];\r\n            setCurrentRestaurant(randomRestaurant); \r\n            });\r\n    }\r\n    \r\n    // sets the random restaurant and displays it\r\n    let currentRandomRestaurant = null;\r\n    if (currentRestaurant) {\r\n        currentRandomRestaurant = (\r\n            <div className=\"random-restaurant\">\r\n                <Typography>The current random restaurant is: </Typography>\r\n                <div>{currentRestaurant.name}</div>\r\n                <div>{currentRestaurant.vicinity}</div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"outer-container\">\r\n            <ThemeProvider theme={theme}>\r\n                <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom >\r\n                    <Box>Random Restaurant Generator</Box>\r\n                </Typography>\r\n            <div className=\"subtitle1\">\r\n                <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" display=\"inline\">\r\n                    <Box >Enter the coordinates of a city and discover a restaurant!</Box>\r\n                </Typography>\r\n            </div>\r\n            </ThemeProvider>\r\n            <div className =\"lat-lng\">\r\n                <Input placeholder = \"search for lat here default is -33.865143\" onChange={handleLatChange}/>\r\n                <Input placeholder = \"search for lng here default is 151.209900\" onChange={handleLngChange}/>\r\n            </div>\r\n            <Button onClick={handleSearch} color =\"secondary\" variant=\"outlined\">Search</Button>\r\n            <div className=\"subtitle2\">\r\n                <Typography  variant=\"h5\" align=\"center\" color=\"textSecondary\" display=\"inline\">\r\n                    <Box >Enter a city and discover a restaurant!</Box>\r\n                </Typography>\r\n            </div>\r\n            <div className=\"other\">\r\n                <div className='lat-lng'>\r\n                    <Input placeholder = \"search for a city here default is Sydney\" onChange={handleSearchChange}></Input> \r\n                </div>\r\n            </div>\r\n            <Button onClick={handleRequest} color=\"secondary\" variant=\"outlined\">Search</Button>\r\n            {currentRandomRestaurant}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Res from './components/Res';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Res />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}